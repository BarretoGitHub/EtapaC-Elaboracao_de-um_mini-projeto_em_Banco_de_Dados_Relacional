-- Sistema para Loja de Aluguel e Venda de Produtos para Festas


-- *************************************  CRIANDO TABELAS   *************************************
CREATE TABLE CATEGORIA_CLIENTE(
	codigoCategoria INT NOT NULL PRIMARY KEY,
	descricao VARCHAR2(50),
	diasDeEmprestimo INT NOT NULL
);

CREATE SEQUENCE CATEGORIA_CLIENTE_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE; 
---------------------------------------

CREATE TABLE CATEGORIA_PRODUTO(
  idCategoriaProduto INT NOT NULL PRIMARY KEY,
  descricao VARCHAR2(50)
);

CREATE SEQUENCE CATEGORIA_PRODUTO_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE; 
---------------------------------------
CREATE TABLE CLIENTE(
  cpfCliente VARCHAR2(20) NOT NULL , 
  nomeCliente VARCHAR2(50) NOT NULL,
  enderecoCliente VARCHAR2(80) NOT NULL,
  cidadeCliente VARCHAR2(30) NOT NULL,
  estadoCliente VARCHAR2(20) NOT NULL,
  telefoneCliente VARCHAR2(15) NOT NULL,
  emailCliente VARCHAR2(50),
  codigoCategoria INT NOT NULL,
  CLIENTE_DATA_NASCIMENTO DATE,
  PRIMARY KEY(cpfCliente), 
  FOREIGN KEY (codigoCategoria) REFERENCES CATEGORIA_CLIENTE(codigoCategoria) ON DELETE SET NULL
);


CREATE SEQUENCE CLIENTE_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
-------------------------------------------------------------------
CREATE TABLE FORNECEDOR(
  CNPJ VARCHAR2(12) NOT NULL PRIMARY KEY,
  idProduto INT NOT NULL,
  nomeFornecedor VARCHAR2(80),
  enderecoFornecedor VARCHAR2(100),
  cidadeFornecedor VARCHAR2(100),
  estadoFornecedor VARCHAR2(80),
  emailFornecedor VARCHAR2(40),
  telefoneFornecedor VARCHAR2(15),
  FOREIGN KEY (idProduto) REFERENCES PRODUTO(idProduto) 
);

CREATE SEQUENCE FORNECEDOR_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
---------------------------------------------------------------------------------------------
CREATE TABLE PRODUTO(
  codigoDeBarras VARCHAR2(30),
  idProduto INT primary key,
  nomeProduto VARCHAR2(100),
  idCategoriaProduto INT NOT NULL,
  quantidadeEstoque INT NOT NULL,
  fabricante VARCHAR2(100),
  localizacaoPrateleira VARCHAR2(5),
  precoDiario NUMBER(8,2) NOT NULL,
  PROD_FORN_CNPJ VARCHAR2(15) NOT NULL,
  FOREIGN KEY (PROD_FORN_CNPJ) REFERENCES FORNECEDOR(CNPJ) ON DELETE SET NULL,
  FOREIGN KEY (idCategoriaProduto) REFERENCES CATEGORIA_PRODUTO(idCategoriaProduto) ON DELETE SET NULL
); 

CREATE SEQUENCE PRODUTO_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
---------------------------------------
CREATE TABLE PRODUTO_FORNECEDOR(
  ID_PRODUTO INT NOT NULL,
  CNPJ_FORNECEDOR VARCHAR2(15) NOT NULL,
  QTD_PRODUTO_COMPRAR INT NOT NULL,
  DATA_COMPRA TIMESTAMP NOT NULL,
  PRECO_UNITARIO NUMERIC(8,2) NOT NULL, 
  PRIMARY KEY(CNPJ_FORNECEDOR,ID_PRODUTO),
  FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO(idProduto) ON DELETE CASCADE,
  FOREIGN KEY (CNPJ_FORNECEDOR) REFERENCES FORNECEDOR(CNPJ) ON DELETE CASCADE
);

CREATE SEQUENCE PRODUTO_FORNECEDOR_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
---------------------------------------
CREATE TABLE FUNCIONARIO(
  idFuncionario INT NOT NULL PRIMARY KEY,
  nomeFuncionario VARCHAR2(50),
  enderecoFuncionario VARCHAR2(50),
  telefoneFuncionario VARCHAR2(15),
  dataNascimentoFuncionario DATE
);

CREATE SEQUENCE FUNCIONARIO_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;  
---------------------------------------
CREATE TABLE RESERVA(
  idReserva INT NOT NULL PRIMARY KEY,
  DATA_HORA TIMESTAMP,
  cpfCliente VARCHAR2(20) NOT NULL,
  idProduto INT NOT NULL,
  idFuncionario INT NOT NULL,
  RESERVAR_QTD_PRODUTO INT NOT NULL, 
  FOREIGN KEY (cpfCliente) REFERENCES CLIENTE(cpfCliente) ON DELETE CASCADE,
  FOREIGN KEY (idProduto) REFERENCES PRODUTO(idProduto) ON DELETE CASCADE,
  FOREIGN KEY (idFuncionario) REFERENCES FUNCIONARIO(idFuncionario) ON DELETE SET NULL
);

CREATE SEQUENCE RESERVA_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
---------------------------------------
CREATE TABLE EMPRESTIMO(
  idEmprestimo INT NOT NULL PRIMARY KEY,
  DATA_HORA_EMPRESTIMO DATE,
  dataPrevista DATE,
  cpfCliente VARCHAR2(20) NOT NULL,
  idFuncionario INT NOT NULL,
  EMPRESTIMO_ID_PRODUTO INT NOT NULL,  
  EMPRESTIMO_QTD_PRODUTO INT NOT NULL,
  EMP_VALOR NUMERIC(8,2) NOT NULL, 
  EMP_DESCONTO NUMERIC(4,2) NOT NULL, 
  FOREIGN KEY (cpfCliente) REFERENCES CLIENTE(cpfCliente) ON DELETE SET NULL,
  FOREIGN KEY (idFuncionario) REFERENCES FUNCIONARIO(idFuncionario) ON DELETE SET NULL,
  FOREIGN KEY (EMPRESTIMO_ID_PRODUTO) REFERENCES PRODUTO(idProduto) ON DELETE SET NULL
);

CREATE SEQUENCE EMPRESTIMO_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCYCLE;
---------------------------------------
CREATE TABLE DEVOLUCAO(
  DEVOLUCAO_ID INT PRIMARY KEY,
  DATA_HORA_DEVOLUCAO DATE,
  DEVOLUCAO_COD_BARRAS VARCHAR2(30),
  DEVOLUCAO_ID_FUNCIONARIO INT,
  DEVOLUCAO_CLIENTE_CPF VARCHAR2(20) NOT NULL,
  SUSPENSO CHAR(1),
  FOREIGN KEY (DEVOLUCAO_ID_FUNCIONARIO) REFERENCES FUNCIONARIO (idFuncionario) ON DELETE CASCADE,
  FOREIGN KEY (DEVOLUCAO_CLIENTE_CPF) REFERENCES CLIENTE(cpfCliente) ON DELETE CASCADE
);

CREATE SEQUENCE DEVOLUCAO_SEQUENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 99999
NOCACHE
NOCYCLE;


---------------------------------------------------------
-- ***********  POPULANDO TABELAS   ***********

-- POPULANDO TABELA CATEGORIA_CLIENTE --
INSERT INTO CATEGORIA_CLIENTE VALUES(CATEGORIA_CLIENTE_SEQUENCIA.NEXTVAL,'OURO',10);
INSERT INTO CATEGORIA_CLIENTE VALUES(CATEGORIA_CLIENTE_SEQUENCIA.NEXTVAL,'PRATA',5);
INSERT INTO CATEGORIA_CLIENTE VALUES(CATEGORIA_CLIENTE_SEQUENCIA.NEXTVAL,'BRONZE',3);
SELECT * FROM CATEGORIA_CLIENTE;


-- POPULANDO TABELA CATEGORIA_PRODUTO --
INSERT INTO CATEGORIA_PRODUTO VALUES(CATEGORIA_PRODUTO_SEQUENCIA.NEXTVAL,'Categoria A');
INSERT INTO CATEGORIA_PRODUTO VALUES(CATEGORIA_PRODUTO_SEQUENCIA.NEXTVAL,'Categoria B');
INSERT INTO CATEGORIA_PRODUTO VALUES(CATEGORIA_PRODUTO_SEQUENCIA.NEXTVAL,'Categoria C');
INSERT INTO CATEGORIA_PRODUTO VALUES(CATEGORIA_PRODUTO_SEQUENCIA.NEXTVAL,'Categoria D');
INSERT INTO CATEGORIA_PRODUTO VALUES(CATEGORIA_PRODUTO_SEQUENCIA.NEXTVAL,'Categoria E');
SELECT * FROM CATEGORIA_PRODUTO ;


-- POPULANDO TABELA CLIENTE --
INSERT INTO CLIENTE VALUES('592.001.154-89','Raul Thales Murilo Viana','Rua Joaquim Bruno da Mota','Mossoró','RN','(81)2558-2194','raulThales@gmail.com',1,'26/08/1995');
INSERT INTO CLIENTE VALUES('240.124.058-61','Alice Giovanna Nascimento','Pra?a da Matriz','Cajapiú','MA','(98)2589-3825','allicceGio@gmail.com',2,'1/08/2000');
INSERT INTO CLIENTE VALUES('603.496.378-81','Bárbara Olivia Helena da Luz"','Rua 29','Caucaia','CE','(85)3810-9453','oliviaBar@gmail.com',3,'16/07/1949');
INSERT INTO CLIENTE VALUES('327.152.155-76','Isaac Mateus Lopes"','Travessa Quinze','Aracaju','SE','(79)2544-5003','lopes123@gmail.com',1,'22/02/1957');
INSERT INTO CLIENTE VALUES('486.200.451-21','Simone Eduarda Caldeira"','Avenida Dom Hélder Câmara','Araraquara','SP','(16) 3938-4009','caldeira97@gmail.com',3,'26/08/1997');
INSERT INTO CLIENTE VALUES('429.349.672-63','Victor Hugo da Cost"','Rua Julio de Aquino','São Carlos','SP','(16) 98441-9666','hugoCost5@gmail.com',2,'5/07/2006');
SELECT * FROM CLIENTE ;


-- POPULANDO TABELA FONECEDOR --
INSERT INTO FORNECEDOR VALUES('90.897.5-9',1,'Brasil 2000','Rua Itália','Araraquara','SP','fornItalia@hotmail.com','(16)3445-8776');
INSERT INTO FORNECEDOR VALUES('56.453.9-2',2,'Nigro ','Avenida Espanha','Araraquara','SP','nigro@hotmail.com','(16)3996-0070');
INSERT INTO FORNECEDOR VALUES('12.438.4-6',3,'Casas A-Z','Rua Nove de Agosto','Araraquara','SP','casaAZ@hotmail.com','(16)3445-8776');
INSERT INTO FORNECEDOR VALUES('16.666.6-6',5,'SONY','Rua Ipiranga','São Paulo','SP','sony19@hotmail.com','(11)3333-9779');
INSERT INTO FORNECEDOR VALUES('17.777.7-9',4,'Brass15','Rual Luiz Alberto','Matão','SP','brass15@gmail.com','(16)8686-4449');
SELECT * FROM FORNECEDOR;


-- POPULANDO TABELA PRODUTO --
INSERT INTO PRODUTO VALUES('EWWQe4rc1T',PRODUTO_SEQUENCIA.NEXTVAL,'MESAS',1,120,'Fab X','P1',120.5,'90.897.5-9');
INSERT INTO PRODUTO VALUES('6Ar8L6bMhQ',PRODUTO_SEQUENCIA.NEXTVAL,'CADEIRAS',2,780,'Fab Y','P2',89.9,'12.438.4-6');
INSERT INTO PRODUTO VALUES('RkClACMSxE',PRODUTO_SEQUENCIA.NEXTVAL,'COPOS',3,344,'Fab Z','P3',17.6,'17.777.7-9');
INSERT INTO PRODUTO VALUES('6wWp544Deb',PRODUTO_SEQUENCIA.NEXTVAL,'TALHERES',4,1200,'Fab KJ','P3',9.9,'56.453.9-2');
INSERT INTO PRODUTO VALUES('pxEQFJQirZ',PRODUTO_SEQUENCIA.NEXTVAL,'SOM/ÁUDIO',5,10,'Fab SP','P4',350.9,'16.666.6-6');
SELECT * FROM PRODUTO;


-- POPULANDO TABELA PRODUTO_FORNECEDOR --
INSERT INTO PRODUTO_FORNECEDOR VALUES(1,'90.897.5-9',120,SYSDATE,120.00);
INSERT INTO PRODUTO_FORNECEDOR VALUES(2,'12.438.4-6',780,SYSDATE,100.00);
INSERT INTO PRODUTO_FORNECEDOR VALUES(3,'17.777.7-9',344,SYSDATE,60.20);
INSERT INTO PRODUTO_FORNECEDOR VALUES(4,'56.453.9-2',1200,SYSDATE,7.8);
INSERT INTO PRODUTO_FORNECEDOR VALUES(5,'16.666.6-6',10,SYSDATE,230.00);
SELECT * FROM PRODUTO_FORNECEDOR;


-- POPULANDO TABELA FUNCIONARIO --
INSERT INTO FUNCIONARIO VALUES(FUNCIONARIO_SEQUENCIA.NEXTVAL,'João Victor dos Santos','Avenida América','(16)3333-3333','12/1/1999');
INSERT INTO FUNCIONARIO VALUES(FUNCIONARIO_SEQUENCIA.NEXTVAL,'Wesley Gabriel Barreto','Avenida Brasil','(16)3331-2433','26/8/2000');
INSERT INTO FUNCIONARIO VALUES(FUNCIONARIO_SEQUENCIA.NEXTVAL,'Alissa Fernandes','Rua Padre Duarte','(16)3736-2963','9/9/2002');
INSERT INTO FUNCIONARIO VALUES(FUNCIONARIO_SEQUENCIA.NEXTVAL,'Maria Bastos','Rua Carlos Gomes','(16)3939-9965','9/7/2007');
SELECT * FROM FUNCIONARIO;


-- POPULANDO TABELA RESERVA -- 
INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,'592.001.154-89',1,1,2);
INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,'240.124.058-61',2,2,5);
INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,'603.496.378-81',3,3,8);
INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,'327.152.155-76',4,4,7);
INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,'486.200.451-21',1,2,2);
SELECT * FROM RESERVA;


-- POPULANDO TABELA EMPRESTIMO -- 
INSERT INTO EMPRESTIMO VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, '04/12/19', SYSDATE + 7,'592.001.154-89',1,1 ,2,241.00,0);
INSERT INTO EMPRESTIMO VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, '05/12/19', SYSDATE + 7 ,'240.124.058-61',2,2,3,269.70,0);
INSERT INTO EMPRESTIMO VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, '06/12/19', SYSDATE + 7 ,'603.496.378-81',3,3,1,17.60,0);
INSERT INTO EMPRESTIMO VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, '07/12/19', SYSDATE + 7 ,'327.152.155-76',4,4,2,19.80,0);
INSERT INTO EMPRESTIMO VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, '08/12/19', SYSDATE + 7 ,'486.200.451-21',2,5,1,350.00,0);
SELECT * FROM EMPRESTIMO;


-- POPULANDO TABELA DEVOLUCAO -- 
INSERT INTO DEVOLUCAO VALUES(DEVOLUCAO_SEQUENCIA.NEXTVAL,SYSDATE,'592.001.154-89',1,'592.001.154-89','S');
INSERT INTO DEVOLUCAO VALUES(DEVOLUCAO_SEQUENCIA.NEXTVAL,SYSDATE,'240.124.058-61',1,'240.124.058-61','S');
INSERT INTO DEVOLUCAO VALUES(DEVOLUCAO_SEQUENCIA.NEXTVAL,SYSDATE,'603.496.378-81',1,'603.496.378-81','S');
INSERT INTO DEVOLUCAO VALUES(DEVOLUCAO_SEQUENCIA.NEXTVAL,SYSDATE,'327.152.155-76',1,'327.152.155-76','N');
INSERT INTO DEVOLUCAO VALUES(DEVOLUCAO_SEQUENCIA.NEXTVAL,SYSDATE,'486.200.451-21',1,'486.200.451-21','N');
SELECT * FROM DEVOLUCAO ;



-- *********** SELECTS TABLES ***********
SELECT * FROM CLIENTE;
SELECT * FROM FORNECEDOR;
SELECT * FROM FUNCIONARIO;
SELECT * FROM PRODUTO;
SELECT * FROM PRODUTO_FORNECEDOR;
SELECT * FROM CATEGORIA_PRODUTO;
SELECT * FROM CATEGORIA_CLIENTE;
SELECT * FROM RESERVA;
SELECT * FROM EMPRESTIMO;
SELECT * FROM DEVOLUCAO;

-- *********** DROPS TABLES ***********
DROP TABLE CLIENTE;
DROP TABLE FORNECEDOR;
DROP TABLE FUNCIONARIO;
DROP TABLE PRODUTO;
DROP TABLE PRODUTO_FORNECEDOR;
DROP TABLE CATEGORIA_PRODUTO;
DROP TABLE CATEGORIA_CLIENTE;
DROP TABLE RESERVA;
DROP TABLE EMPRESTIMO;
DROP TABLE DEVOLUCAO;

--*********** DROPS SEQUENCES ***********
DROP SEQUENCE CLIENTE_SEQUENCIA;
DROP SEQUENCE FORNECEDOR_SEQUENCIA;
DROP SEQUENCE FUNCIONARIO_SEQUENCIA;
DROP SEQUENCE PRODUTO_SEQUENCIA;
DROP SEQUENCE PRODUTO_FORNECEDOR_SEQUENCIA;
DROP SEQUENCE CATEGORIA_PRODUTO_SEQUENCIA;
DROP SEQUENCE CATEGORIA_CLIENTE_SEQUENCIA;
DROP SEQUENCE EMPRESTIMO_SEQUENCIA;
DROP SEQUENCE DEVOLUCAO_SEQUENCIA;
DROP SEQUENCE RESERVA_SEQUENCIA;

--*********** DELETES ***********
DELETE FROM CATEGORIA_CLIENTE WHERE 1=1;
DELETE FROM CATEGORIA_PRODUTO WHERE 1=1;
DELETE FROM CLIENTE WHERE 1=1;
DELETE FROM FORNECEDOR WHERE 1=1;
DELETE FROM PRODUTO_FORNECEDOR WHERE 1=1;
DELETE FROM PRODUTO WHERE 1=1;
DELETE FROM FUNCIONARIO WHERE 1=1;
DELETE FROM RESERVA WHERE 1=1;
DELETE FROM EMPRESTIMO WHERE 1=1;
DELETE FROM DEVOLUCAO WHERE 1=1;



-- *******************************************************************
                                    -- RELATÓRIOS --
-- RELATÓRIO 1: 
/* 1) O sistema deve permitir a impressão de uma listagem de produtos alugados no momento,
contendo data inicial do aluguel, data final do aluguel, dados de identificação do cliente,
dados de identificação dos produtos alugados, quantidades alugadas, valor total e
desconto concedido.*/

SELECT 
    c.NOMECLIENTE as "CLIENTE",
    c.TELEFONECLIENTE as "TELEFONE",
    e.DATA_HORA_EMPRESTIMO as "DATA EMPRESTIMO",
    e.DATAPREVISTA as "DATA PREVISTA",
    p.NOMEPRODUTO as "PRODUTO",
    p.CODIGODEBARRAS as "CODIGO DE BARRAS",
    e.EMPRESTIMO_QTD_PRODUTO as "QUANTIDADE"
FROM EMPRESTIMO e
INNER JOIN CLIENTE c ON e.CPFCLIENTE = c.CPFCLIENTE
INNER JOIN PRODUTO p ON e.EMPRESTIMO_ID_PRODUTO = p.IDPRODUTO
INNER JOIN DEVOLUCAO d ON e.CPFCLIENTE = d.DEVOLUCAO_CLIENTE_CPF
WHERE ('06/12/19' BETWEEN e.DATA_HORA_EMPRESTIMO AND e.DATAPREVISTA) AND (d.DATA_HORA_DEVOLUCAO IS NOT NULL);
----------

-- RELATÓRIO 2: 
/* 2) O sistema deve permitir a impressão de uma listagem de clientes que possuem produtos
alugados  em atraso, contendo o nome do cliente, telefone, os produtos a devolver, 
a data prevista para devolução, quantidade de dias em atraso e valor da multa.*/
SELECT 
    c.NOMECLIENTE as "CLIENTE",
    c.TELEFONECLIENTE as "TELEFONE",
    p.NOMEPRODUTO as "TELEFONE",
    p.CODIGODEBARRAS as "CODIGO DE BARRAS",
    e.EMPRESTIMO_QTD_PRODUTO as "QUANTIDADE",
    e.DATAPREVISTA,
    d.DATA_HORA_DEVOLUCAO
FROM CLIENTE c
INNER JOIN EMPRESTIMO e ON c.CPFCLIENTE = e.CPFCLIENTE
INNER JOIN PRODUTO p ON e.EMPRESTIMO_ID_PRODUTO = p.IDPRODUTO
INNER JOIN DEVOLUCAO d ON e.CPFCLIENTE = d.DEVOLUCAO_CLIENTE_CPF
WHERE ('14-12-2020' > e.DATAPREVISTA) AND (d.DATA_HORA_DEVOLUCAO IS NOT NULL);
----------

-- RELATÓRIO 3:
/* 3) O sistema deve permitir a impressão de um relatório contendo dados das compras efetuadas, 
contendo a data da compra, dados de identificação do fornecedor, dados de identificação dos
produtos comprados, a quantidade de cada um e o pre?o unit?rio de cada produto comprado.*/

SELECT 
  pf.DATA_COMPRA as "DATA COMPRA",
  pf.CNPJ_FORNECEDOR as "CNPJ",
  f.NOMEFORNECEDOR as "NOME",
  f.EMAILFORNECEDOR as "EMAIL",
  f.TELEFONEFORNECEDOR as "TELEFONE",
  p.NOMEPRODUTO as "NOME PRODUTO",
  P.PRECODIARIO as "PRECO",
  pf.QTD_PRODUTO_COMPRAR as "QTD_PRODUTO_COMPRAR"
FROM PRODUTO_FORNECEDOR pf
    INNER JOIN PRODUTO p ON pf.ID_PRODUTO = p.IDPRODUTO
    INNER JOIN FORNECEDOR f ON pf.CNPJ_FORNECEDOR = f.CNPJ ORDER BY f.NOMEFORNECEDOR;
----------
-- RELATÓRIO 4: 
/* 4) O sistema deve permitir a impressão de uma listagem de produtos de modo a saber quais os
 produtos mais alugados e os menos alugados da loja.*/
 
SELECT 
  p.IDPRODUTO as "ID PRODUTO",
  p.NOMEPRODUTO as "NOME",
  p.CODIGODEBARRAS as "CODIGO DE BARRAS",
(SELECT SUM(e.EMPRESTIMO_QTD_PRODUTO)  FROM EMPRESTIMO e
WHERE e.EMPRESTIMO_ID_PRODUTO = p.IDPRODUTO) as "QUANTIDADE"
FROM PRODUTO p ORDER BY "QUANTIDADE";

--RELATÓRIO 5: 
/* 5) O sistema deve permitir a impressão de uma listagem de clientes de modo a saber quais os clientes
 que mais alugam e os que menos alugam na loja.*/

SELECT 
  c.NOMECLIENTE as "NOME",
  c.CPFCLIENTE as "CPF",
  c.TELEFONECLIENTE as "TELEFONE",
  c.EMAILCLIENTE as "EMAIL",
  (SELECT SUM(e.EMPRESTIMO_QTD_PRODUTO) FROM EMPRESTIMO e
    WHERE e.CPFCLIENTE = c.CPFCLIENTE) as "QUANTIDADE"
FROM CLIENTE c ORDER BY QUANTIDADE;

----------
-- RELATÓRIO 6: 
/* 6) O sistema deve permitir a impressão de uma listagem de fornecedores de modo a saber quais os fornecedores 
que mais fornecem produtos e os que menos fornecem para a loja.*/

SELECT 
  f.NOMEFORNECEDOR as "FORNECEDOR",
  SUM(pf.QTD_PRODUTO_COMPRAR) as "QUANTIDADE"
    FROM PRODUTO_FORNECEDOR pf
    INNER JOIN FORNECEDOR f ON pf.CNPJ_FORNECEDOR = f.CNPJ
    GROUP BY f.NOMEFORNECEDOR;

--RELATÓRIO 7:
/* 7) Consultando produtos emprestadas ordenadas por categoria de obra, contendo o nome do cpf do cliente,
 nome do produto, quantidade de produtos á emprestar, nome do fornecedor, data de emprestimo e data prevista para a devolução do produto. */

SELECT 
      a.idCategoriaProduto "ID_PRODUTO",
      a.nomeProduto "PRODUTO",
      b.EMPRESTIMO_QTD_PRODUTO"QUANTIDADE-EMPRESTADAS",
      b.cpfCliente "CPF-CLIENTE",
      c.nomeFornecedor "FABRICANTE",
      b.DATA_HORA_EMPRESTIMO "DATA-EMPRESTIMO",
      b.dataPrevista "DATA-PREVISTA" 
FROM PRODUTO a,EMPRESTIMO b, FORNECEDOR c
     WHERE  a.PROD_FORN_CNPJ = c.CNPJ AND b.EMPRESTIMO_ID_PRODUTO = a.idProduto 
     AND (SYSDATE BETWEEN b.DATA_HORA_EMPRESTIMO AND b.DATAPREVISTA);

----------
-- RELATÓRIO 8:
/* 8) Consultando produtos em atraso, contendo o produto ,nome do cliente, o telefone, o email,id do produto, data de empréstimo */

SELECT 
       a.nomeProduto "PRODUTO",
       b.nomeCliente "CLIENTE",
       b.telefoneCliente "TEL-CLIENTE",
       b.emailCliente "MAIL-CLIENTE",
       c.idEmprestimo "NUMERO-PRODUTO",
       c.DATA_HORA_EMPRESTIMO "DATA-EMPRESTIMO"
FROM PRODUTO a,CLIENTE b,EMPRESTIMO c
WHERE b.cpfCliente = c.cpfCliente AND a.idProduto= c.EMPRESTIMO_ID_PRODUTO; 
   
--RELATÓRIO 9:
/* 9) Consultando reservas efetuadas, contendo o produto,nome e-mail e telefone do cliente,o numero da reserva, quantidade de produtos reservados,
nome e id do funcionario reponsavel pela reservas.*/
SELECT 
      a.nomeProduto "PRODUTO",
      b.nomeCliente "CLIENTE",
      b.telefoneCliente "TEL-CLIENTE",
      b.emailCliente "MAIL-CLIENTE",
      c.idReserva "NUMERO RESERVA",
      c.RESERVAR_QTD_PRODUTO "UNIDADES-RESERVADAS",
      f.nomeFuncionario "FUNCION?RIO RESPONSAVEL",
      f.idFuncionario "ID-FUNCINARIO"
FROM PRODUTO a,CLIENTE b, RESERVA c,FUNCIONARIO f
     WHERE b.cpfCliente = c.cpfCliente AND a.idProduto = c.idProduto AND c.idFuncionario = f.idFuncionario;



--************************* TRIGGERS ***************************
--  TRIGGER acionado quando inserir,atualizar ou deletar registros na tabela Produto 
CREATE OR REPLACE TRIGGER TRIGGER_PRODUTO_ATUALIZAR BEFORE
    INSERT OR UPDATE OR DELETE ON PRODUTO
    FOR EACH ROW
BEGIN
    CASE
        WHEN inserting THEN
            dbms_output.put_line(' PRODUTO INSERIDO COM SUCESSO: ' ||:new.nomeProduto);
        WHEN updating THEN
            dbms_output.put_line(' PRODUTO ATUALIZADO COM SUCESSO');
        WHEN deleting THEN
            dbms_output.put_line(' PRODUTO EXCLUIDO COM SUCESSO');
    END CASE;
END;
/


--*************************  FUNCTIONS  ***************************
-- FUNCTION 1 -- 
CREATE OR REPLACE FUNCTION VERIFICA_CATEGORIA_CLIENTE(flag_codigoCategoria CATEGORIA_CLIENTE.codigoCategoria%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA1 CATEGORIA_CLIENTE.codigoCategoria%TYPE;
        BEGIN 
         SELECT codigoCategoria INTO CATEGORIA_VERIFICADA1  FROM CATEGORIA_CLIENTE 
            WHERE codigoCategoria = flag_codigoCategoria;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO. Categoria Cliente não encontrado!');
     RETURN FALSE;
END VERIFICA_CATEGORIA_CLIENTE;

-- FUNCTION 2 --  
CREATE OR REPLACE FUNCTION VERIFICA_CATEGORIA_PRODUTO(flag_idCategoriaProduto CATEGORIA_PRODUTO.idCategoriaProduto%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA2 CATEGORIA_PRODUTO.idCategoriaProduto%TYPE;
        BEGIN 
         SELECT idCategoriaProduto INTO CATEGORIA_VERIFICADA2  FROM CATEGORIA_PRODUTO 
            WHERE idCategoriaProduto = flag_idCategoriaProduto;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Categoria Produto não encontrada !');
     RETURN FALSE;
END VERIFICA_CATEGORIA_PRODUTO;
   
-- FUNCTION 3 -- 
CREATE OR REPLACE FUNCTION VERIFICA_CLIENTE(flag_cpfCliente CLIENTE.cpfCliente%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA3 CLIENTE.cpfCliente%TYPE;
        BEGIN 
         SELECT cpfCliente INTO CATEGORIA_VERIFICADA3  FROM CLIENTE 
            WHERE cpfCliente = flag_cpfCliente;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Cliente não encontrado!');
     RETURN FALSE;
END VERIFICA_CLIENTE;

-- FUNCTION 4 -- 
CREATE OR REPLACE FUNCTION VERIFICA_FORNECEDOR(flag_CNPJ FORNECEDOR.CNPJ%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA4 FORNECEDOR.CNPJ%TYPE;
        BEGIN 
         SELECT CNPJ INTO CATEGORIA_VERIFICADA4  FROM FORNECEDOR 
            WHERE CNPJ = flag_CNPJ;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Fornecedor não encontrado!');
     RETURN FALSE;
END VERIFICA_FORNECEDOR;


-- FUNCTION 5 -- 
CREATE OR REPLACE FUNCTION VERIFICA_PRODUTO(flag_idProduto PRODUTO.idProduto%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA5 PRODUTO.idProduto%TYPE;
        BEGIN 
         SELECT idProduto INTO CATEGORIA_VERIFICADA5  FROM PRODUTO 
            WHERE idProduto = flag_idProduto;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Produto não encontrado!');
     RETURN FALSE;
END VERIFICA_PRODUTO;


-- FUNCTION 6 -- 
CREATE OR REPLACE FUNCTION VERIFICA_PRODUTO_FORNECEDOR(flag_CNPJ_FORNECEDOR PRODUTO_FORNECEDOR.CNPJ_FORNECEDOR%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA6 PRODUTO_FORNECEDOR.CNPJ_FORNECEDOR%TYPE;
        
        BEGIN 
         SELECT CNPJ_FORNECEDOR INTO CATEGORIA_VERIFICADA6  FROM PRODUTO_FORNECEDOR 
            WHERE CNPJ_FORNECEDOR = flag_CNPJ_FORNECEDOR;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Produto-Fornecedor não encontrado!');
     RETURN FALSE;
END VERIFICA_PRODUTO_FORNECEDOR;


-- FUNCTION 7 -- 
CREATE OR REPLACE FUNCTION VERIFICA_FUNCIONARIO(flag_idFuncionario FUNCIONARIO.idFuncionario%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA7 FUNCIONARIO.idFuncionario%TYPE;
        
        BEGIN 
         SELECT idFuncionario INTO CATEGORIA_VERIFICADA7  FROM FUNCIONARIO 
            WHERE idFuncionario = flag_idFuncionario;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Funcionário não encontrado!');
     RETURN FALSE;
END VERIFICA_FUNCIONARIO;


-- FUNCTION 8 -- 
CREATE OR REPLACE FUNCTION VERIFICA_RESERVA(flag_idReserva RESERVA.idReserva%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA8 RESERVA.idReserva%TYPE;
        
        BEGIN 
         SELECT idReserva INTO CATEGORIA_VERIFICADA8  FROM RESERVA
            WHERE idFuncionario = flag_idReserva;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Reserva não encontrado!');
     RETURN FALSE;
END VERIFICA_RESERVA;


-- FUNCTION 9 -- 
CREATE OR REPLACE FUNCTION VERIFICA_EMPRESTIMO(flag_idEmprestimo EMPRESTIMO.idEmprestimo%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA9 EMPRESTIMO.idEmprestimo%TYPE;
        
        BEGIN 
         SELECT idEmprestimo INTO CATEGORIA_VERIFICADA9  FROM EMPRESTIMO
            WHERE  idEmprestimo = flag_idEmprestimo;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Emprestimo não encontrado!');
     RETURN FALSE;
END VERIFICA_EMPRESTIMO;


-- FUNCTION 10 -- 
CREATE OR REPLACE FUNCTION VERIFICA_DEVOLUCAO(flag_DEVOLUCAO_ID DEVOLUCAO.DEVOLUCAO_ID%TYPE)
    RETURN BOOLEAN IS 
        CATEGORIA_VERIFICADA10 DEVOLUCAO.DEVOLUCAO_ID%TYPE;
        
        BEGIN 
         SELECT DEVOLUCAO_ID INTO CATEGORIA_VERIFICADA10  FROM DEVOLUCAO
            WHERE  DEVOLUCAO_ID = flag_DEVOLUCAO_ID;
        RETURN TRUE;
        
    EXCEPTION WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERRO.Devolucao não encontrada!');
     RETURN FALSE;
END VERIFICA_DEVOLUCAO;


-- FUNCTION 11 -- 
--VERIFICAR A SUPENSÃO DE UM DETERMINADO CLIENTE
CREATE OR REPLACE FUNCTION CHECK_SUSPENSAO(COD_CLIENTE INT) RETURN VARCHAR2 IS
    CURSOR PRE_CURSOR IS
        SELECT EM.dataPrevista FROM EMPRESTIMO EM,DEVOLUCAO D
            WHERE EM.cpfCliente = D.DEVOLUCAO_CLIENTE_CPF OR D.DATA_HORA_DEVOLUCAO = NULL;
        PREV DATE;
BEGIN
    OPEN PRE_CURSOR;
        LOOP
            FETCH PRE_CURSOR INTO PREV;
            EXIT WHEN PRE_CURSOR%NOTFOUND;
                IF PREV < SYSDATE THEN
                      RETURN 'SIM';
                END IF;
        END LOOP;
    RETURN 'NAO';
END CHECK_SUSPENSAO;


-- FUNÇÃO USADA PARA VERIFICAR A QUANTIDADE DE UM PRODUTO NO ESTOQUE.
-- FUNCTION 12 --
CREATE OR REPLACE FUNCTION QTD_PROD_ESTOQUE(
    PROD_ID PRODUTO.idProduto%TYPE) 
    RETURN NUMBER AS 
        CURSOR CUR_QTD IS
         SELECT quantidadeEstoque 
         FROM PRODUTO
         WHERE idProduto = PROD_ID;
    
    QTD_PROD CUR_QTD%ROWTYPE;
BEGIN 
    OPEN CUR_QTD;
    FETCH CUR_QTD INTO QTD_PROD;
    IF CUR_QTD%FOUND THEN 
        CLOSE CUR_QTD;
        RETURN QTD_PROD.quantidadeEstoque;
    ELSE
        CLOSE CUR_QTD;
        RETURN 0;
    END IF;
END;
/

--- FUNCTION 13 ---
CREATE OR REPLACE FUNCTION VERIFICA_PRODUTO(
    PROD_ID PRODUTO.IDPRODUTO%TYPE) RETURN BOOLEAN AS
        CURSOR CUR_PROD IS
            SELECT * FROM PRODUTO
            WHERE IDPRODUTO = PROD_ID;
        PROD CUR_PROD%ROWTYPE;
BEGIN 
   OPEN CUR_PROD;
   FETCH CUR_PROD INTO PROD;

    IF CUR_PROD%FOUND THEN 
        CLOSE CUR_PROD;
        RETURN TRUE;
    ELSE
        CLOSE CUR_PROD;
        RETURN FALSE;
    END IF;

END;
/


--*************************  PROCEDURES  ***************************
-- PROCEDURE 1 --
-- Usando PROCEDURE  para retonar as PRODUTOS com mais quantidade.
SET SERVEROUTPUT ON;
CREATE OR REPLACE  PROCEDURE QUANTIDADE_PRODUTOS IS
    CURSOR MAIS_PRODUTOS IS 
        SELECT nomeProduto,idProduto
               FROM PRODUTO WHERE idProduto = (SELECT MAX(idProduto) FROM PRODUTO);
    emp_rec  MAIS_PRODUTOS%rowtype;
BEGIN
    OPEN MAIS_PRODUTOS;
    LOOP
         FETCH MAIS_PRODUTOS INTO emp_rec;
         EXIT WHEN MAIS_PRODUTOS%notfound;
             dbms_output.put_line(emp_rec.nomeProduto ||'PRODUTO: '||emp_rec.idProduto ||' ID-PRODUTO: ');
     END LOOP;
CLOSE MAIS_PRODUTOS;
END;
/

-- PROCEDURE 2 --   
CREATE OR REPLACE PROCEDURE RESERVAR(COD_CLIENTE VARCHAR2, COD_P INT, COD_F INT) IS
    SUSPENDED EXCEPTION;
    BEGIN
        IF VERIFICA_CLIENTE(COD_CLIENTE) = 'SIM' THEN
            RAISE SUSPENDED;
        END IF;
        
    INSERT INTO RESERVA
           VALUES (RESERVA_SEQ.NEXTVAL, SYSTIMESTAMP, COD_CLIENTE, COD_P, COD_F);
    COMMIT;
        EXCEPTION
            WHEN SUSPENDED THEN
            ROLLBACK;
             DBMS_OUTPUT.PUT_LINE('O cliente está suspenso, ele só podera reservar outro produto quando 
                fazer a devolução dos que tem.');
END RESERVAR;

-- PROCEDURE 3 -- 
-- PROCEDURE CRIADA PARA REALIZAR EMPRESTIMO DE PRODUTO
CREATE OR REPLACE PROCEDURE EMP_PROD( 
    FUN_ID EMPRESTIMO.idFuncionario%TYPE,
    CPF_CLI EMPRESTIMO.cpfCliente%TYPE,
    QTD_PROD EMPRESTIMO.EMPRESTIMO_QTD_PRODUTO%TYPE,
    PROD_ID EMPRESTIMO.EMPRESTIMO_ID_PRODUTO%TYPE,
    EMP_DESC EMPRESTIMO.EMP_DESCONTO%TYPE)
    IS
     CURSOR CUR_PROD IS
        SELECT precoDiario, codigoDeBarras 
        FROM PRODUTO 
        WHERE idProduto = PROD_ID;
     PROD_DADO CUR_PROD%ROWTYPE;
BEGIN 
    OPEN CUR_PROD;
    FETCH CUR_PROD INTO PROD_DADO;

    IF VERIFICA_PRODUTO(PROD_ID) THEN
        IF QTD_PROD_ESTOQUE(PROD_ID) > QTD_PROD THEN
            INSERT INTO EMPRESTIMO
            VALUES(EMPRESTIMO_SEQUENCIA.NEXTVAL, SYSDATE, SYSDATE + 7, CPF_CLI, FUN_ID, PROD_ID,
                    QTD_PROD, PROD_DADO.precoDiario * QTD_PROD, EMP_DESC);

            INSERT INTO DEVOLUCAO(DEVOLUCAO_ID, DEVOLUCAO_CLIENTE_CPF, DEVOLUCAO_COD_BARRAS)
            VALUES (DEVOLUCAO_SEQUENCIA.NEXTVAL,CPF_CLI,PROD_DADO.codigoDeBarras);
            CLOSE CUR_PROD;
        ELSE
            DBMS_OUTPUT.PUT_LINE('NÃO TEM A QUANTIDADE  DE ' || QTD_PROD || ' NO ESTOQUE.');
            CLOSE CUR_PROD;
        END IF;
    ELSE
         DBMS_OUTPUT.PUT_LINE('PRODUTO COM ID ' || PROD_ID || ' NÃO FOI LOCALIZADO NA BASE DE DADOS.');
         CLOSE CUR_PROD;
    END IF;
END;
/
-- PROCEDURE 4 -- 
--PROCEDURE USADA PARA ADICIONAR UM PRODUTO
CREATE OR REPLACE PROCEDURE ADD_PRODUTO(
        codigoDeBarras PRODUTO.CODIGODEBARRAS%TYPE,
        nomeProduto PRODUTO.NOMEPRODUTO%TYPE,
        idCategoriaProduto PRODUTO.IDCATEGORIAPRODUTO%TYPE,
        quantidadeEstoque PRODUTO.QUANTIDADEESTOQUE%TYPE,
        fabricante PRODUTO.FABRICANTE%TYPE,
        localizacaoPrateleira PRODUTO.LOCALIZACAOPRATELEIRA%TYPE,
        precoDiario PRODUTO.PRECODIARIO%TYPE,
        prod_forn_cnpj PRODUTO.PROD_FORN_CNPJ%TYPE) IS
BEGIN 

    INSERT INTO PRODUTO VALUES(codigoDeBarras,PRODUTO_SEQUENCIA.NEXTVAL,nomeProduto,idCategoriaProduto,quantidadeEstoque,
                              fabricante,localizacaoPrateleira,precoDiario,prod_forn_cnpj);
    IF SQL%ROWCOUNT > 0 THEN 
         DBMS_OUTPUT.PUT_LINE('Produto inserido com sucesso');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Não foi possivel inserir o produto');
    END IF;
END;
/
-- PROCEDURE 5 -- 
-- PROCEDURE USADA PARA INSERIR UM FORNECEDOR
CREATE OR REPLACE PROCEDURE ADD_FORNECEDOR(
        CNPJ FORNECEDOR.CNPJ%TYPE,
        idProduto FORNECEDOR.IDPRODUTO%TYPE,
        nomeFornecedor FORNECEDOR.NOMEFORNECEDOR%TYPE,
        enderecoFornecedor FORNECEDOR.ENDERECOFORNECEDOR%TYPE,
        cidadeFornecedor FORNECEDOR.CIDADEFORNECEDOR%TYPE,
        estadoFornecedor FORNECEDOR.ESTADOFORNECEDOR%TYPE,
        emailFornecedor FORNECEDOR.EMAILFORNECEDOR%TYPE,
        telefoneFornecedor FORNECEDOR.TELEFONEFORNECEDOR%TYPE
    ) IS
BEGIN

    INSERT INTO FORNECEDOR VALUES(CNPJ,FORNECEDOR_SEQUENCIA.NEXTVAL,nomeFornecedor,enderecoFornecedor,
                                  cidadeFornecedor,estadoFornecedor,emailFornecedor,telefoneFornecedor);

    IF SQL%ROWCOUNT > 0 THEN 
        DBMS_OUTPUT.PUT_LINE('Fornecedor inserido com sucesso.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Não foi possivel inserir o Fornecedor.');
    END IF;
END;
/

-- PROCEDURE 6 -- 
-- PROCEURE USADA PARA INSERIR RESERVA_PRODUTO
CREATE OR REPLACE PROCEDURE ADD_RESERVA_PRODUTO(
        dt_h reserva.DATA_HORA%type,
        cpf_cliente reserva.cpfCliente%type,
        id_func reserva.idFuncionario%type,
        reserva_quant reserva.RESERVAR_QTD_PRODUTO%type,
        idProduto reserva.idProduto%type
    ) IS
BEGIN 
    IF QTD_PROD_ESTOQUE(idProduto) > reserva_quant THEN --verificando se tem a quantidade no estoque
        INSERT INTO RESERVA VALUES(RESERVA_SEQUENCIA.NEXTVAL, SYSDATE,dt_h,cpf_cliente,idProduto,id_func,reserva_quant);

        IF SQL%ROWCOUNT > 0 THEN 
            DBMS_OUTPUT.PUT_LINE('Reserva inserido com sucesso.');
        ELSE
             DBMS_OUTPUT.PUT_LINE('Nao foi possivel inserir o reserva.');
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Não tem essa quantidade de produto no estoque.');
    END IF;
END;
/

-- PROCEDURE 8 -- 
--- PROCEDURE PARA ADICIONAR CLIENTE
CREATE OR REPLACE PROCEDURE ADD_CLIENTE(
        cpf_cliente CLIENTE.CPFCLIENTE%TYPE , 
        nome_cliente CLIENTE.NOMECLIENTE%TYPE,
        endereco_cliente CLIENTE.ENDERECOCLIENTE%TYPE,
        cidade_cliente CLIENTE.CIDADECLIENTE%TYPE,
        estado_cliente CLIENTE.ESTADOCLIENTE%TYPE,
        telefone_cliente CLIENTE.TELEFONECLIENTE%TYPE,
        email_cliente CLIENTE.EMAILCLIENTE%TYPE,
        codigo_categoria CLIENTE.CODIGOCATEGORIA%TYPE,
        cliente_data_nascimento CLIENTE.CLIENTE_DATA_NASCIMENTO%TYPE
    ) IS
BEGIN
    INSERT INTO CLIENTE VALUES(cpf_cliente,nome_cliente,endereco_cliente,cidade_cliente,estado_cliente,telefone_cliente,
           email_cliente,codigo_categoria,cliente_data_nascimento);

    IF SQL%ROWCOUNT > 0 THEN 
        DBMS_OUTPUT.PUT_LINE('Cliente inserido com sucesso');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nao foi possivel inserir o cliente');
    END IF;
END;
/

-- PROCEDURE 9 -- 
--- PROCEDURE PARA REMOVER RESERVA
CREATE OR REPLACE PROCEDURE REMOVER_RESERVA(
    id_reserva reserva.idReserva%type,
    cpf_Cliente reserva.cpfCliente%type,
    id_Produto reserva.idProduto%type)
IS 
BEGIN 
    IF(VERIFICA_PRODUTO(id_Produto)) THEN 
        UPDATE RESERVA SET 
            reserva.STATUS_RESERVA = false
        WHERE cpfCliente = cpfCliente AND idProduto = id_Produto AND idReserva = id_reserva;
    ELSE
     DBMS_OUTPUT.PUT_LINE('Produto não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 10 -- 
--- PROCEDURE PARA REMOVER CATEGORIA CLIENTE
CREATE OR REPLACE PROCEDURE REMOVER_CATEGORIA_CLIENTE(
    flag_codigoCategoria CATEGORIA_CLIENTE.codigoCategoria%type,
    flag_descricao CATEGORIA_CLIENTE.descricao%type,
    flag_diasDeEmprestimo CATEGORIA_CLIENTE.diasDeEmprestimo%type)
IS 
BEGIN 
    IF(VERIFICA_CATEGORIA_CLIENTE(flag_codigoCategoria) )THEN 
        UPDATE CATEGORIA_CLIENTE SET 
            descricao = '-'
        WHERE codigoCategoria = flag_codigoCategoria;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Categoria-Cliente não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 11 -- 
--- PROCEDURE PARA REMOVER CATEGORIA PRODUTO
CREATE OR REPLACE PROCEDURE REMOVER_CATEGORIA_PRODUTO(
    flag_idCategoriaProduto CATEGORIA_PRODUTO.idCategoriaProduto%type,
    flag_descricao CATEGORIA_PRODUTO.descricao%type)
IS 
BEGIN 
    IF(VERIFICA_CATEGORIA_PRODUTO(flag_idCategoriaProduto))THEN 
        UPDATE CATEGORIA_PRODUTO SET 
            descricao = '-'
        WHERE idCategoriaProduto = flag_idCategoriaProduto;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Categoria-Produto não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 12 -- 
--- PROCEDURE PARA REMOVER CLIENTE
CREATE OR REPLACE PROCEDURE REMOVER_CLIENTE(
    flag_cpfCliente CLIENTE.cpfCliente%type,
    flag_codigoCategoria CLIENTE.codigoCategoria%type)
IS 
BEGIN 
    IF(VERIFICA_CLIENTE(flag_codigoCategoria)) THEN 
        UPDATE CLIENTE SET 
            codigoCategoria = -1
        WHERE flag_cpfCliente = cpfCliente;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Cliente não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 13 -- 
--- PROCEDURE PARA REMOVER FORNECEDOR
CREATE OR REPLACE PROCEDURE REMOVER_FORNECEDOR(
    flag_CNPJ FORNECEDOR.CNPJ%type,
    flag_idProduto FORNECEDOR.idProduto%type)
IS 
BEGIN 
    IF(VERIFICA_FORNECEDOR(flag_CNPJ)) THEN 
        UPDATE FORNECEDOR SET 
            CNPJ = ''
        WHERE flag_CNPJ = CNPJ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Fornecedor não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 14 -- 
--- PROCEDURE PARA REMOVER PRODUTO
CREATE OR REPLACE PROCEDURE REMOVER_PRODUTO(
    flag_idProduto PRODUTO.idProduto%type,
    flag_CNPJ PRODUTO.PROD_FORN_CNPJ%type,
    flag_idCategoriaProduto PRODUTO.idCategoriaProduto%type)
IS 
BEGIN 
    IF(VERIFICA_PRODUTO(flag_CNPJ)) THEN 
        UPDATE PRODUTO SET 
            PROD_FORN_CNPJ = ''
        WHERE flag_CNPJ = PROD_FORN_CNPJ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Produto não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 15 -- 
--- PROCEDURE PARA REMOVER PRODUTO-FORNECEDOR
CREATE OR REPLACE PROCEDURE REMOVER_PRODUTO_FORNECEDOR(
    flag_idProduto PRODUTO_FORNECEDOR.ID_PRODUTO%type,
    flag_CNPJ PRODUTO_FORNECEDOR.CNPJ_FORNECEDOR%type)
IS 
BEGIN 
    IF(VERIFICA_PRODUTO_FORNECEDOR(flag_CNPJ)) THEN 
        UPDATE PRODUTO_FORNECEDOR SET 
            CNPJ_FORNECEDOR = ''
        WHERE flag_CNPJ = CNPJ_FORNECEDOR;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Produto-Forncedor não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 16 -- 
--- PROCEDURE PARA REMOVER FUNCIONÁRIO
CREATE OR REPLACE PROCEDURE REMOVER_FUNCIONARIO(
    flag_idFuncionario FUNCIONARIO.idFuncionario%type)
IS 
    BEGIN 
    IF(VERIFICA_FUNCIONARIO(flag_idFuncionario)) THEN 
        UPDATE FUNCIONARIO SET 
            idFuncionario = -1
        WHERE flag_idFuncionario = idFuncionario;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Funcionário não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 17 -- 
--- PROCEDURE PARA REMOVER RESERVA
CREATE OR REPLACE PROCEDURE REMOVER_RESERVA(
    flag_idReserva RESERVA.idReserva%type,
    flag_cpfCliente RESERVA.cpfCliente%type,
    flag_idProduto RESERVA.idProduto%type,
    flag_idFuncionario RESERVA.idFuncionario%type)

IS 
    BEGIN 
    IF(VERIFICA_RESERVA(flag_idReserva)) THEN 
        UPDATE RESERVA SET 
            idReserva = -1
        WHERE flag_idReserva = idReserva;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Reserva não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 18 -- 
--- PROCEDURE PARA REMOVER EMPRESTIMO
CREATE OR REPLACE PROCEDURE REMOVER_EMPRESTIMO(
    flag_idEmprestimo EMPRESTIMO.idEmprestimo%type,
    flag_cpfCliente EMPRESTIMO.cpfCliente%type,
    flag_idFuncionario EMPRESTIMO.idFuncionario%type,
    flag_EMPRESTIMO_ID_PRODUTO EMPRESTIMO.EMPRESTIMO_ID_PRODUTO%type)

IS 
    BEGIN 
    IF(VERIFICA_EMPRESTIMO(flag_EMPRESTIMO_ID_PRODUTO)) THEN 
        UPDATE EMPRESTIMO SET 
            idEmprestimo = -1
        WHERE flag_idEmprestimo = idEmprestimo;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Empréstimo não foi encontrado');
    END IF;
END;
/

-- PROCEDURE 19 -- 
--- PROCEDURE PARA REMOVER DEVOLUÇÃO
CREATE OR REPLACE PROCEDURE REMOVER_DEVOLUCAO(
    flag_DEVOLUCAO_ID  DEVOLUCAO.DEVOLUCAO_ID%type,
    flag_DEVOLUCAO_ID_FUNCIONARIO DEVOLUCAO.DEVOLUCAO_ID_FUNCIONARIO%type,
    flag_DEVOLUCAO_CLIENTE_CPF DEVOLUCAO.DEVOLUCAO_CLIENTE_CPF%type)
IS 
    BEGIN 
    IF(VERIFICA_DEVOLUCAO(flag_DEVOLUCAO_ID)) THEN 
        UPDATE DEVOLUCAO SET 
            DEVOLUCAO_ID = -1
        WHERE flag_DEVOLUCAO_ID = DEVOLUCAO_ID;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Devolução não foi encontrado');
    END IF;
END;
/

